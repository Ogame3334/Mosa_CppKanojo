//#pragma once
//# include <Siv3D.hpp>
//#include<unordered_map>
//#include<memory>
//#include"../Judge.h"
//#include"./sceneManager.h"
//# include "../readUserData.h"
//
//// 速度調整シーン
//// 挙動 : D、Fキーで判定速度を遅く、J、Kキーで速度を早くする
//// 　　　ESCキーで終了
//class Mdspeed : public App::Scene {
//private:
//	
//	int userTouchSpeed;	// ユーザの音ズレ速度を調整する変数
//	UserData userData;
//
//	// 試し用音源の設定
//	const SongData songData = {
//		U"adjustbpm_120",
//		Audio{ Audio::Stream, U"assets\\TestSong\\adjustbpm_120.mp3", Loop::Yes},
//		120
//	};
//	std::unordered_map<String, Texture>textures = std::unordered_map<String, Texture>{
//		{U"excellent", Texture{U"assets\\Textures\\text_excellent.png"}},
//		{U"good", Texture{U"assets\\Textures\\text_good.png"}},
//		{U"miss", Texture{U"assets\\Textures\\text_miss.png"}},
//
//		{U"apple", Texture{U"assets\\Textures\\apple.png"}},
//		{U"broken_apple", Texture{U"assets\\Textures\\broken_apple.png"}}
//	};
//	s3d::Array<std::shared_ptr<class NoteBase>> notes;
//	uint8 frontNoteId;
//	Circle hit{ 100, Scene::Center().y, 50 };
//	SongData data;
//	uint32 currentTime;
//	Stopwatch sw{ StartImmediately::Yes };
//
//	uint32 judgeTiming = 250;
//	uint32 parmitDilay = 100;
//	Array<std::pair<JUDGE, uint32>> judges;
//
//public:
//
//	Mdspeed(const InitData& init)
//		: IScene{ init } {
//		userTouchSpeed = Parse<uint32>(userData.getUserOptionData(U"touchSpeed"));	// ユーザデータから音ズレ速度を取得
//	}
//
//	void update() override
//	{
//		// 再生されていなかったら再生する
//		if (!songData.audio.isPlaying()) {
//			songData.audio.play();
//		}
//
//		currentTime = uint32(songData.audio.posSec() * 1000);
//
//		//update judge message
//		if (judges.size() > 0 && currentTime - judges.front().second > 1000) {
//			judges.pop_front();
//		}
//
//		//decide front node
//		int32 difTime = 0;
//		for (; 3;) { // <- It's so cute!!!
//			difTime = int32(notes.at(frontNoteId)->getTiming()) - int32(currentTime);
//			if (difTime >= -int32(parmitDilay)) break;
//			if (!nextNote()) break;
//		}
//
//		//process key controle
//		if (KeyF.down() || KeyD.down()) {
//			judges.push_back(std::pair<JUDGE, uint32>{
//				notes.at(frontNoteId)->hit(difTime), currentTime
//			});
//		}
//	}
//
//	void draw() const override
//	{
//		hit.draw();
//		for (auto note : notes) {
//			//note->getTexture()->drawAt(
//			//	Math::Floor(hit.center.x + (int(note->getTiming()) - int(currentTime)) * data.bpm / 400),
//			//	Scene::Center().y
//			//);
//			Rect{
//				int32(hit.center.x + (int(note->getTiming()) - int(currentTime)) * data.bpm / 300) - 50,
//				Scene::Center().y - 50, 100
//			}(*(note->getTexture())).draw();
//		}
//		for (auto judge : judges) {
//			String judgeMsg = U"miss";
//			switch (judge.first) {
//			case JUDGE::excellent:
//				judgeMsg = U"excellent";
//				break;
//			case JUDGE::good:
//				judgeMsg = U"good";
//			}
//			int32 delta = (currentTime - judge.second) / 20;
//			textures.at(judgeMsg).draw(
//				int32(hit.right().x) + delta,
//				int32(hit.top().y - 50) + (delta - 10) * (delta - 10) - 100
//			);
//		}
//	}
//
//	void loadNotes() {
//		TextReader reader{ U"assets\\Songs\\{}.txt"_fmt(data.title) };
//
//		if (not reader)
//		{
//			throw Error{ U"譜面 {} が見つかりません。"_fmt(data.title) };
//		}
//		String line;
//
//		reader.readLine(line);
//
//		data.bpm = Parse<uint8>(line);
//
//		while (reader.readLine(line))
//		{
//			if (line.isEmpty())
//			{
//				continue;
//			}
//
//			double one_bar = 240000 / data.bpm;
//			for (int i = 0; i < line.length(); ++i) {
//				userTouchSpeed += one_bar / Math::Pow(4, i) * (line.at(i) - '0');
//			}
//
//			notes.push_back(std::shared_ptr<TestNote>(new TestNote{ this, userTouchSpeed, &textures[U"apple"] }));
//		}
//	}
//
//	//先頭のノートを次に進める
//    //true:ノートを進めた
//    //false:次のノートがない
//	bool nextNote() {
//		if (frontNoteId + 1 >= notes.size()) {
//			return false;
//		}
//		frontNoteId++;
//		return true;
//	}
//
//	uint32 getJudgeTiming() {
//		return judgeTiming;
//	}
//
//	Texture* getTexture(String name) {
//		return &textures[name];
//	}
//};

